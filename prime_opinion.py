# Encrypted Python Script (No Password)
import base64, zlib, gzip, lzma, marshal, sys
from Crypto.Cipher import AES

KEY_LEN = 32
NONCE_LEN = 16
TAG_LEN = 16

def multi_decompress(data: bytes):
    lzmaed = zlib.decompress(data)
    gzipped = lzma.decompress(lzmaed)
    marshaled = gzip.decompress(gzipped)
    code = marshal.loads(marshaled)
    return code

def coophalco():
    try:
        b64_data = ''
        payload = base64.b64decode(b64_data)
        pos = 0
        key = payload[pos:pos+KEY_LEN]; pos += KEY_LEN
        nonce = payload[pos:pos+NONCE_LEN]; pos += NONCE_LEN
        tag = payload[pos:pos+TAG_LEN]; pos += TAG_LEN
        ciphertext = payload[pos:]
        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        decrypted = cipher.decrypt_and_verify(ciphertext, tag)
        code = multi_decompress(decrypted)
        exec(code, globals())
    except Exception as e:
        print(f"Error: {type(e).__name__}: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    coophalco()
