
import os, base64, zlib, gzip, lzma, getpass, marshal, hashlib, sys
from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2

PBKDF2_ITERS = 300000
SALT_LEN = 32
KEY_LEN = 32

def derive_key_from_pass(passphrase: str, salt: bytes) -> bytes:
    return PBKDF2(passphrase.encode("utf-8"), salt, dkLen=KEY_LEN, count=PBKDF2_ITERS)

def multi_decompress(data: bytes):
    lzmaed = zlib.decompress(data)
    gzipped = lzma.decompress(lzmaed)
    marshaled = gzip.decompress(gzipped)
    code = marshal.loads(marshaled)
    return code

def coophalco():
    try:
        b64_data = ''
        payload = base64.b64decode(b64_data)
        
        pos = 0
        integrity_hash = payload[pos:pos+16]
        pos += 16
        
        salt = payload[pos:pos+SALT_LEN]
        pos += SALT_LEN
        
        nonce = payload[pos:pos+16]
        pos += 16
        
        tag = payload[pos:pos+16]
        pos += 16
        
        ciphertext = payload[pos:]
        
        pw = os.getenv("SCRIPT_KEY")
        if not pw:
            pw = getpass.getpass("Enter password: ")
        
        if hashlib.sha256(pw.encode()).digest()[:16] != integrity_hash:
            print("Error: Invalid password")
            sys.exit(1)
        
        key = derive_key_from_pass(pw, salt)
        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        
        try:
            decrypted = cipher.decrypt_and_verify(ciphertext, tag)
        except ValueError as e:
            print("Error: Wrong Password")
            print("This usually means wrong password or corrupted data")
            sys.exit(1)

        code = multi_decompress(decrypted)
        exec(code, globals())
        
    except Exception as e:
        print(f"Error: {type(e).__name__}: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    coophalco()
